@model List<Pastar.ViewModels.BoxViewModel>
@{
    ViewData["Title"] = "Корзина";
}

<div class="container py-5">
    @Html.AntiForgeryToken()
    <h1 class="text-center mb-5">Ваша корзина</h1>

    <!-- Блок для отображения ошибок -->
    <div id="error-message" class="alert alert-danger d-none mt-3" role="alert"></div>

    @if (!Model.Any())
    {
        <p class="text-center fs-4">Корзина пуста</p>
    }
    else
    {
        <table class="table align-middle">
            <thead>
                <tr>
                    <th></th>
                    <th>Название</th>
                    <th>Цена</th>
                    <th>Количество</th>
                    <th>Сумма</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var box in Model)
                {
                    <tr id="row-@box.BoxId" class="box-row" data-box-id="@box.BoxId">
                        <td style="width: 140px;">
                            <div id="carousel-@box.BoxId" class="carousel slide" data-bs-ride="carousel">
                                <div class="carousel-inner rounded shadow-sm">
                                    @for (int i = 0; i < box.ImagePaths.Count; i++)
                                    {
                                        var path = box.ImagePaths[i];
                                        <div class="carousel-item @(i == 0 ? "active" : "")">
                                            <img src="@path"
                                                 class="d-block w-100 img-thumbnail"
                                                 style="object-fit: cover; max-height: 100px;" />
                                        </div>
                                    }
                                </div>
                                @if (box.ImagePaths.Count > 1)
                                {
                                    <button class="carousel-control-prev" type="button" data-bs-target="#carousel-@box.BoxId" data-bs-slide="prev">
                                        <span class="carousel-control-prev-icon"></span>
                                    </button>
                                    <button class="carousel-control-next" type="button" data-bs-target="#carousel-@box.BoxId" data-bs-slide="next">
                                        <span class="carousel-control-next-icon"></span>
                                    </button>
                                }
                            </div>
                        </td>

                        <td>@box.BoxName</td>
                        <td id="price-@box.BoxId">@box.BoxPrice.₽</td>
                        <td>
                            <div class="d-flex align-items-center gap-2">
                                <button class="btn btn-outline-secondary" onclick="updateCart(@box.BoxId, -1)">−</button>
                                <span id="quantity-@box.BoxId" class="quantity">@box.Quantity</span>
                                <button class="btn btn-outline-secondary" onclick="updateCart(@box.BoxId, 1)">+</button>
                            </div>
                        </td>
                        <td id="sum-@box.BoxId" class="box-sum">@((box.BoxPrice * box.Quantity).ToString("0.00")) ₽</td>
                        <td>
                            <button class="btn btn-outline-danger btn-sm" onclick="removeBox(@box.BoxId)">Удалить</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="text-end mt-4">
            <h4>Итого: <span id="total">@Model.Sum(b => b.BoxPrice * b.Quantity).ToString("0.00")</span> ₽</h4>
            <div class="text-end mt-4">
                <a href="javascript:void(0);" class="custom-button" onclick="showOrderModal()">Оформить заказ</a>
            </div>
        </div>
    }
</div>

<div id="orderModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content" style="border-radius: 80px; background-color: #e0e0e0; overflow: hidden;">
            <div class="modal-header position-relative" style="padding: 1rem 2.5rem;">
                <h5 class="modal-title mx-auto">Оформление</h5>
                <button type="button" class="btn-close position-absolute" style="right: 1.5rem; top: 1.5rem;" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>
            <div class="modal-body d-flex flex-column-reverse flex-md-row">
                <div class="w-100 w-md-75 p-4">
                    <form id="orderForm" method="post">
                        @Html.AntiForgeryToken()

                        <div class="row">
                            <div class="col-md-6 mb-2">
                                <label class="form-label">Фамилия <span class="text-danger">*</span></label>
                                <input type="text" name="LastName" class="form-control" required>
                            </div>
                            <div class="col-md-6 mb-2">
                                <label class="form-label">Имя <span class="text-danger">*</span></label>
                                <input type="text" name="FirstName" class="form-control" required>
                            </div>
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Отчество</label>
                            <input type="text" name="MiddleName" class="form-control">
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Контактный телефон <span class="text-danger">*</span></label>
                            <input type="text" name="Phone" class="form-control" required>
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Способ связи <span class="text-danger">*</span></label>
                            <select name="ContactMethod" class="form-select" required>
                                @foreach (var method in ViewBag.ConnectionMethods as List<Pastar.Models.WayOfConnection>)
                                {
                                    <option value="@method.ConnectionMethod">@method.ConnectionMethod</option>
                                }
                            </select>
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Промокод</label>
                            <input type="text" name="PromoCode" class="form-control">
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Комментарий</label>
                            <textarea name="Comment" class="form-control"></textarea>
                        </div>

                        <div id="cartItems"></div>

                        <div class="mt-3 text-end">
                            <strong>Итого: <span id="modalTotal">0.00 ₽</span></strong>
                        </div>
                    </form>
                </div>

                <div class="w-100 w-md-25 p-4 text-center text-md-start">
                    <p style="color: #d9534f; font-size: 1.2em; font-weight: 500;">
                        Для подтверждения заказа с вами обязательно свяжутся. Без подтверждения заказ аннулируется
                    </p>
                    <p style="color: #d9534f; font-size: 1.2em; font-weight: 500;">
                        ТОЛЬКО самовывоз! Оплата при получении
                    </p>
                    <button type="submit" form="orderForm" class="btn btn-light px-4">OK</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Функция для обновления количества товара
        [HttpPost]
        public IActionResult UpdateQuantity(long boxId, int quantityChange)
        {
            var cart = HttpContext.Session.GetObjectFromJson<Dictionary<long, int>>("Cart") ?? new Dictionary<long, int>();
            var box = _context.Boxes.FirstOrDefault(b => b.BoxId == boxId);

            if (box == null)
                return Json(new { error = "Бокс не найден" });

            if (cart.ContainsKey(boxId)) {
                cart[boxId] += quantityChange;
                if (cart[boxId] <= 0) {
                    cart.Remove(boxId);
                }
            }
            else {
                cart[boxId] = 1;
            }

            HttpContext.Session.SetObjectAsJson("Cart", cart);

            // Подсчёт суммы
            var boxIds = cart.Keys.ToList();
            var boxesInCart = _context.Boxes
                .Where(b => boxIds.Contains(b.BoxId))
                .ToDictionary(b => b.BoxId);

            var total = cart.Sum(c => {
                if (boxesInCart.TryGetValue(c.Key, out var currentBox))
            return currentBox.BoxPrice * c.Value;
            return 0;
        });

        return Json(new
            {
                newQuantity = cart.TryGetValue(boxId, out var qty) ? qty : 0,
            newTotal = total
            });
        }


        // Удаление товара из корзины
        function removeBox(boxId) {
            fetch(`/Cart/RemoveFromCart?boxId=${boxId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => {
                    if (!response.ok) {
                        return response.text().then(text => { throw new Error(text); });
                    }
                    return response.json();
                })
                .then(data => {
                    document.getElementById(`row-${boxId}`).remove();
                    document.getElementById("total").textContent = `${data.total.toFixed(2)} ₽`;

                    if (data.total === 0) {
                        document.querySelector("table").remove();
                        document.querySelector("h4").remove();
                        document.querySelector("a.custom-button").remove();
                        const emptyMessage = document.createElement("p");
                        emptyMessage.className = "text-center fs-4";
                        emptyMessage.textContent = "Корзина пуста";
                        document.querySelector(".container").appendChild(emptyMessage);
                    }
                });
        }

        // Функция для загрузки товаров в модальном окне
        function loadCartItems() {
            fetch('/Cart/Index')
                .then(response => response.json())
                .then(data => {
                    const cartItemsContainer = document.getElementById('cartItems');
                    if (!data || data.length === 0) {
                        cartItemsContainer.innerHTML = '<p>Корзина пуста</p>';
                        document.getElementById('modalTotal').textContent = '0.00 ₽';
                        return;
                    }

                    let cartItemsHtml = '';
                    let total = 0;
                    data.forEach(item => {
                        cartItemsHtml += `
                                    <div class="row mb-2">
                                        <div class="col-8">
                                            <p>${item.BoxName} (x${item.Quantity})</p>
                                        </div>
                                        <div class="col-4 text-end">
                                            <p>${(item.BoxPrice * item.Quantity).toFixed(2)} ₽</p>
                                        </div>
                                    </div>
                                `;
                        total += item.BoxPrice * item.Quantity;
                    });

                    cartItemsContainer.innerHTML = cartItemsHtml;
                    document.getElementById('modalTotal').textContent = `${total.toFixed(2)} ₽`;
                });
        }
        function updateCart(boxId, delta) {
            fetch('/Cart/UpdateQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    boxId: boxId,
                    quantityChange: delta
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        alert(data.error);
                        return;
                    }

                    const quantityEl = document.getElementById(`quantity-${boxId}`);
                    const sumEl = document.getElementById(`sum-${boxId}`);
                    const priceEl = document.getElementById(`price-${boxId}`);

                    const price = parseFloat(priceEl.textContent.replace('₽', '').trim());

                    quantityEl.textContent = data.newQuantity;
                    sumEl.textContent = (price * data.newQuantity).toFixed(2) + " ₽";
                    document.getElementById('total').textContent = data.newTotal.toFixed(2) + " ₽";

                    if (document.getElementById('orderModal')?.classList.contains('show')) {
                        loadCartItems();
                    }
                })
                .catch(err => console.error('Ошибка:', err));
        }


        function showOrderModal() {
            loadCartItems();
            var orderModal = new bootstrap.Modal(document.getElementById('orderModal'));
            orderModal.show();
        }
    </script>
}
