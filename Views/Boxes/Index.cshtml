@model List<Pastar.ViewModels.BoxViewModel>
@{
    ViewData["Title"] = "Боксы";
}

<div class="container py-5">
    <h1 class="text-center mb-5">Боксы</h1>

    @foreach (var box in Model)
    {
        <div class="row mb-5 align-items-center">
            <div class="col-lg-6 mb-3 mb-lg-0">
                <div id="carousel-@box.BoxId" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-inner rounded shadow-sm">
                        @for (int i = 0; i < box.ImagePaths.Count; i++)
                        {
                            var path = box.ImagePaths[i];
                            <div class="carousel-item @(i == 0 ? "active" : "")">
                                <img src="@path"
                                     class="d-block w-100"
                                     style="object-fit: cover; max-height: 300px; cursor: pointer;"
                                     data-bs-toggle="modal"
                                     data-bs-target="#imageModal"
                                     data-img="@path" />
                            </div>
                        }
                    </div>
                    @if (box.ImagePaths.Count > 1)
                    {
                        <button class="carousel-control-prev" type="button" data-bs-target="#carousel-@box.BoxId" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon"></span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#carousel-@box.BoxId" data-bs-slide="next">
                            <span class="carousel-control-next-icon"></span>
                        </button>
                    }
                </div>
            </div>

            <div class="col-lg-6 d-flex flex-column justify-content-center">
                <h4 class="fw-bold mb-3">@box.BoxName</h4>
                <p class="mb-4">@box.BoxDescription</p>
                <span class="fs-5 fw-bold mb-2">Цена: @box.BoxPrice.ToString("0.00") ₽</span>

                <div class="d-flex align-items-center gap-2 mt-3">
                    <button class="btn btn-outline-secondary" onclick="updateCart(@box.BoxId, -1)">−</button>
                    <span id="quantity-@box.BoxId">@box.Quantity</span>
                    <button class="btn btn-outline-secondary" onclick="updateCart(@box.BoxId, 1)">+</button>
                </div>
            </div>
        </div>
        <hr />
    }
</div>

<div class="modal fade" id="imageModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content bg-transparent border-0">
            <div class="modal-body p-0">
                <img id="modalImage" src="" class="img-fluid rounded shadow-sm" />
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const quantities = {};

        function updateCart(boxId, delta) {
            const current = quantities[boxId] || 0;
            const newQuantity = Math.max(0, current + delta); // Нельзя установить количество меньше 0
            quantities[boxId] = newQuantity;
            document.getElementById('quantity-' + boxId).textContent = newQuantity;

            // Проверяем, что значение не 0 перед отправкой
            if (newQuantity > 0) {
                sendUpdateToServer(boxId, newQuantity);
            } else {
                // Если количество 0, можно либо удалить товар, либо оставить как есть
                removeFromCart(boxId);
            }
        }

        function sendUpdateToServer(boxId, quantity) {
            fetch('/Cart/UpdateQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ boxId: boxId, quantity: quantity })
            });
        }

        function removeFromCart(boxId) {
            fetch('/Cart/RemoveFromCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ boxId: boxId })
            });
        }

        const imageModal = document.getElementById('imageModal');
        imageModal.addEventListener('show.bs.modal', function (e) {
            const img = e.relatedTarget;
            document.getElementById('modalImage').src = img.getAttribute('data-img');
        });
    </script>

    @Html.AntiForgeryToken()
}
